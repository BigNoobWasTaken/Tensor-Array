# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: CUDA keyring
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
        sudo dpkg -i cuda-keyring_1.1-1_all.deb
        
    - name: Load cache
      uses: actions/cache@v2
      id: package-cache
      with:
        path: "${{ runner.temp }}/package-cache"
        key: cmake-build-${{ secrets.APT_CACHE_KEY }}

    - name: Load package from cache
      if: steps.package-cache.outputs.cache-hit == 'true'
      run: |
        sudo cp --verbose --force --recursive ${{ runner.temp }}/package-cache/* /
    
    - name: apt-get update
      run: |
        sudo apt-get update
    
    - name: Install from apt
      env:
        REQUIRED_PKG: ${{ vars.INSTALL_BUILD_PACKAGES }}
      run: |
        if [ $(dpkg-query -W --showformat='${Status}\n' $REQUIRED_PKG|grep "install ok installed") -eq 0 ];
        then
          echo "No $REQUIRED_PKG. Setting up $REQUIRED_PKG."
          sudo apt-get --yes install $REQUIRED_PKG
        fi
    
    - name: Save package to cache
      run: |
        mkdir -p ${{ runner.temp }}/package-cache
        sudo dpkg -L ${{ vars.INSTALL_BUILD_PACKAGES }} | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ${{ runner.temp }}/package-cache

    - name: Add CUDA to path
      run: |
        sudo apt-get update
        echo "PATH=/usr/local/cuda/bin${PATH:+:${PATH}}" >> "$GITHUB_ENV"
        echo "LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" >> "$GITHUB_ENV"
        echo "LD_LIBRARY_PATH=/usr/local/cuda/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" >> "$GITHUB_ENV"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

