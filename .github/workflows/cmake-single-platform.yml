# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cuda-version: [ "12.3" ]
    steps:
    - uses: actions/checkout@v3
        
    - name: Load cache
      uses: actions/cache@v2
      id: package-cache
      with:
        path: "${{ runner.temp }}/package-cache/cuda-${{ matrix.cuda-version }}"
        key: cmake-build-cuda-${{ secrets.APT_CACHE_KEY }}

    - name: Load package from cache
      if: steps.package-cache.outputs.cache-hit == 'true'
      run: |
        sudo cp --verbose --force --recursive ${{ runner.temp }}/package-cache/cuda-${{ matrix.cuda-version }}/* /
    
    - name: Run CUDA bash shell
      if: steps.package-cache.outputs.cache-hit != 'true'
      env:
        temp: ${{ runner.temp }}
        cuda: ${{ matrix.cuda-version }}
      run: |
        chmod +x ./scripts/actions/install-cuda-ubuntu.sh
        ./scripts/actions/install-cuda-ubuntu.sh
      shell: bash

    - name: Add to github PATH
      run: |
        echo "Adding CUDA to CUDA_PATH, PATH and LD_LIBRARY_PATH"
        echo "${CUDA_PATH}/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=${CUDA_PATH}/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${CUDA_PATH}/lib64:${LD_LIBRARY_PATH}" >> $GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
